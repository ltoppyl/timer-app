{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\i030ff\\\\dev\\\\personal-development\\\\timer_app\\\\src\\\\components\\\\Main.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Text } from \"@chakra-ui/react\";\nimport { useTimer } from \"react-timer-hook\";\nimport ActionSelectButton from \"./ActionSelectButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Timer = ({\n  expiryTimestamp\n}) => {\n  _s();\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      textAlign: \"center\",\n      fontSize: 100,\n      children: [days, \":\", hours, \":\", minutes, \":\", seconds]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      textAlign: \"center\",\n      children: isRunning ? \"Running\" : \"Not running\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionSelectButton, {\n      start: start,\n      pause: pause,\n      resume: resume,\n      restart: restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Timer, \"6CHTXYE4hYR3Y6FCGCldSLAuexM=\", false, function () {\n  return [useTimer];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/i030ff/dev/personal-development/timer_app/src/components/Main.tsx"],"names":["React","Text","useTimer","ActionSelectButton","Timer","expiryTimestamp","seconds","minutes","hours","days","isRunning","start","pause","resume","restart","onExpire","console","warn"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;;AAQA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgC;AAAA;;AAC5C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA,IAA3B;AAAiCC,IAAAA,SAAjC;AAA4CC,IAAAA,KAA5C;AAAmDC,IAAAA,KAAnD;AAA0DC,IAAAA,MAA1D;AAAkEC,IAAAA;AAAlE,MAA8EZ,QAAQ,CAAC;AAC3FG,IAAAA,eAD2F;AAE3FU,IAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,IAAR,CAAa,iBAAb;AAF2E,GAAD,CAA5F;AAKA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAE,QAAjB;AAA2B,MAAA,QAAQ,EAAE,GAArC;AAAA,iBACGR,IADH,OACUD,KADV,OACkBD,OADlB,OAC4BD,OAD5B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAE,QAAjB;AAAA,gBAA4BI,SAAS,GAAG,SAAH,GAAe;AAApD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,kBAAD;AACE,MAAA,KAAK,EAAEC,KADT;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,MAAM,EAAEC,MAHV;AAIE,MAAA,OAAO,EAAEC;AAJX;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAcD,CApBD;;GAAMV,K;UACgFF,Q;;;KADhFE,K;AAqBN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport { useTimer } from \"react-timer-hook\";\r\nimport ActionSelectButton from \"./ActionSelectButton\";\r\n\r\ntype Props = {\r\n  settingTime: number;\r\n  setSettingTime: React.Dispatch<React.SetStateAction<number>>;\r\n  expiryTimestamp: Date;\r\n};\r\n\r\nconst Timer = ({ expiryTimestamp }: Props) => {\r\n  const { seconds, minutes, hours, days, isRunning, start, pause, resume, restart } = useTimer({\r\n    expiryTimestamp,\r\n    onExpire: () => console.warn(\"onExpire called\"),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Text textAlign={\"center\"} fontSize={100}>\r\n        {days}:{hours}:{minutes}:{seconds}\r\n      </Text>\r\n      <Text textAlign={\"center\"}>{isRunning ? \"Running\" : \"Not running\"}</Text>\r\n      <ActionSelectButton\r\n        start={start}\r\n        pause={pause}\r\n        resume={resume}\r\n        restart={restart}\r\n      ></ActionSelectButton>\r\n    </>\r\n  );\r\n};\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}