{"ast":null,"code":"import React from\"react\";import{Text}from\"@chakra-ui/react\";import{useTimer}from\"react-timer-hook\";import ActionSelectButton from\"./ActionSelectButton\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Timer=function Timer(_ref){var settingTime=_ref.settingTime,setSettingTime=_ref.setSettingTime,expiryTimestamp=_ref.expiryTimestamp;var _useTimer=useTimer({expiryTimestamp:expiryTimestamp,onExpire:function onExpire(){return console.warn(\"onExpire called\");}}),seconds=_useTimer.seconds,minutes=_useTimer.minutes,hours=_useTimer.hours,days=_useTimer.days,isRunning=_useTimer.isRunning,start=_useTimer.start,pause=_useTimer.pause,resume=_useTimer.resume,restart=_useTimer.restart;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Text,{textAlign:\"center\",fontSize:100,children:[days,\":\",hours,\":\",minutes,\":\",seconds]}),/*#__PURE__*/_jsx(Text,{textAlign:\"center\",children:isRunning?\"Running\":\"Not running\"}),/*#__PURE__*/_jsx(ActionSelectButton,{start:start,pause:pause,resume:resume,restart:restart,settingTime:settingTime,setSettingTime:setSettingTime})]});};export default Timer;","map":{"version":3,"sources":["C:/Users/i030ff/dev/personal-development/timer_app/src/components/Main.tsx"],"names":["React","Text","useTimer","ActionSelectButton","Timer","settingTime","setSettingTime","expiryTimestamp","onExpire","console","warn","seconds","minutes","hours","days","isRunning","start","pause","resume","restart"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,C,6IAQA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAA6D,IAA1DC,CAAAA,WAA0D,MAA1DA,WAA0D,CAA7CC,cAA6C,MAA7CA,cAA6C,CAA7BC,eAA6B,MAA7BA,eAA6B,eACWL,QAAQ,CAAC,CAC3FK,eAAe,CAAfA,eAD2F,CAE3FC,QAAQ,CAAE,0BAAMC,CAAAA,OAAO,CAACC,IAAR,CAAa,iBAAb,CAAN,EAFiF,CAAD,CADnB,CACjEC,OADiE,WACjEA,OADiE,CACxDC,OADwD,WACxDA,OADwD,CAC/CC,KAD+C,WAC/CA,KAD+C,CACxCC,IADwC,WACxCA,IADwC,CAClCC,SADkC,WAClCA,SADkC,CACvBC,KADuB,WACvBA,KADuB,CAChBC,KADgB,WAChBA,KADgB,CACTC,MADS,WACTA,MADS,CACDC,OADC,WACDA,OADC,CAMzE,mBACE,wCACE,MAAC,IAAD,EAAM,SAAS,CAAE,QAAjB,CAA2B,QAAQ,CAAE,GAArC,WACGL,IADH,KACUD,KADV,KACkBD,OADlB,KAC4BD,OAD5B,GADF,cAIE,KAAC,IAAD,EAAM,SAAS,CAAE,QAAjB,UAA4BI,SAAS,CAAG,SAAH,CAAe,aAApD,EAJF,cAKE,KAAC,kBAAD,EACE,KAAK,CAAEC,KADT,CAEE,KAAK,CAAEC,KAFT,CAGE,MAAM,CAAEC,MAHV,CAIE,OAAO,CAAEC,OAJX,CAKE,WAAW,CAAEd,WALf,CAME,cAAc,CAAEC,cANlB,EALF,GADF,CAgBD,CAtBD,CAuBA,cAAeF,CAAAA,KAAf","sourcesContent":["import React from \"react\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport { useTimer } from \"react-timer-hook\";\r\nimport ActionSelectButton from \"./ActionSelectButton\";\r\n\r\ntype Props = {\r\n  settingTime: number;\r\n  setSettingTime: React.Dispatch<React.SetStateAction<number>>;\r\n  expiryTimestamp: Date;\r\n};\r\n\r\nconst Timer = ({ settingTime, setSettingTime, expiryTimestamp }: Props) => {\r\n  const { seconds, minutes, hours, days, isRunning, start, pause, resume, restart } = useTimer({\r\n    expiryTimestamp,\r\n    onExpire: () => console.warn(\"onExpire called\"),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Text textAlign={\"center\"} fontSize={100}>\r\n        {days}:{hours}:{minutes}:{seconds}\r\n      </Text>\r\n      <Text textAlign={\"center\"}>{isRunning ? \"Running\" : \"Not running\"}</Text>\r\n      <ActionSelectButton\r\n        start={start}\r\n        pause={pause}\r\n        resume={resume}\r\n        restart={restart}\r\n        settingTime={settingTime}\r\n        setSettingTime={setSettingTime}\r\n      ></ActionSelectButton>\r\n    </>\r\n  );\r\n};\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}